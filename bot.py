import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram.ext import JobQueue
from datetime import time

import os

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–ª–æ–≤–∞—Ä—å —Å–µ—Å—Å–∏–π: –Ω–∞–∑–≤–∞–Ω–∏–µ -> –≤—Ä–µ–º—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
SESSIONS = {
    "–ê–∑–∏–∞—Ç—Å–∫–∞—è —Å–µ—Å—Å–∏—è": (time(hour=2, minute=0), "üïë –ê–∑–∏–∞—Ç—Å–∫–∞—è —Å–µ—Å—Å–∏—è –æ—Ç–∫—Ä—ã–ª–∞—Å—å."),
    "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è —Å–µ—Å—Å–∏—è": (time(hour=10, minute=0), "üïô –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è —Å–µ—Å—Å–∏—è –æ—Ç–∫—Ä—ã–ª–∞—Å—å."),
    "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è": (time(hour=16, minute=30), "üïü –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è –æ—Ç–∫—Ä—ã–ª–∞—Å—å."),
    "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –õ–æ–Ω–¥–æ–Ω‚Äì–ù—å—é-–ô–æ—Ä–∫": (time(hour=16, minute=30), "üîÅ –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –õ–æ–Ω–¥–æ–Ω‚Äì–ù—å—é-–ô–æ—Ä–∫ –Ω–∞—á–∞–ª–æ—Å—å.")
}

user_jobs = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –Ω–∞—á–∞–ª–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π.")

    for session_name, (session_time, message) in SESSIONS.items():
        job = context.job_queue.run_daily(
            send_message,
            time=session_time,
            context={'chat_id': chat_id, 'message': message},
            name=f"{session_name}_{chat_id}"
        )
        user_jobs.setdefault(chat_id, []).append(job)

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    jobs = user_jobs.get(chat_id, [])
    for job in jobs:
        job.schedule_removal()
    user_jobs[chat_id] = []
    await update.message.reply_text("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

async def send_message(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.context
    await context.bot.send_message(chat_id=job_data['chat_id'], text=job_data['message'])

def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stop", stop))
    application.run_polling()

if __name__ == '__main__':
    main()
